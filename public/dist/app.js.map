{
  "version": 3,
  "sources": ["../Components/ConversationWindow.ts", "../Components/MultiConversationLayout.ts", "../../src/server/types/Ui.ts", "../app.ts"],
  "sourcesContent": ["interface MessageData {\n  id: string;\n  username: string;\n  avatar_url: string;\n  content: string;\n  timestamp: number;\n  roomName: string;\n  edited?: boolean;\n}\n\nexport class ConversationWindow {\n  private roomName: string;\n  private onClose: (name: string) => void;\n  private onActivate: (name: string) => void;\n  private socket: WebSocket;\n  private currentUsername: string;\n  public element: HTMLDivElement;\n  private messageContainer: HTMLDivElement;\n  private unreadCount: number;\n\n  constructor(\n    roomName: string,\n    onClose: (name: string) => void,\n    onActivate: (name: string) => void,\n    socket: WebSocket,\n    currentUsername: string\n  ) {\n    this.roomName = roomName;\n    this.onClose = onClose;\n    this.onActivate = onActivate;\n    this.socket = socket;\n    this.currentUsername = currentUsername;\n    this.element = this.createElement();\n    this.messageContainer = this.element.querySelector(\n      \".messages\"\n    ) as HTMLDivElement;\n    this.unreadCount = 0;\n    this.setupEventListeners();\n  }\n\n  clearMessages(): void {\n    this.messageContainer.innerHTML = \"\";\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private createElement(): HTMLDivElement {\n    const div = document.createElement(\"div\");\n    div.className = \"conversation-window\";\n    div.innerHTML = `\n      <div class=\"window-header\">\n        <h3 data-unread=\"0\">${this.roomName}</h3>\n        <button class=\"close-btn\" aria-label=\"Close conversation\">\u00D7</button>\n      </div>\n      <div class=\"messages\"></div>\n    `;\n    return div;\n  }\n\n  private setupEventListeners(): void {\n    this.element.addEventListener(\"click\", (e: MouseEvent) => {\n      const target = e.target as HTMLElement;\n      if (!target.closest(\".close-btn\")) {\n        this.clearUnread();\n        this.onActivate(this.roomName);\n        this.addMessageHistory;\n      }\n    });\n\n    const closeBtn = this.element.querySelector(\".close-btn\");\n    if (closeBtn) {\n      closeBtn.addEventListener(\"click\", (e: Event) => {\n        e.stopPropagation();\n        this.onClose(this.roomName);\n      });\n    }\n  }\n\n  addMessage(messageData: MessageData): void {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.className = \"message\";\n    messageDiv.dataset.messageId = messageData.id;\n\n    let timeString = \"Unknown time\";\n    const timestamp = new Date(messageData.timestamp);\n    const avatarUrl = messageData.avatar_url || \"/img/default-avatar.png\";\n    timeString = timestamp.toLocaleTimeString();\n\n    // Add controls if the message is from current user\n    const controls = this.isOwnMessage(messageData.username)\n      ? `\n          <button class=\"delete-btn\" aria-label=\"Delete message\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n              <path d=\"M3 6h18\"/>\n              <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/>\n              <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\n            </svg>\n          </button>\n          <button class=\"edit-btn\" aria-label=\"Edit message\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n              <path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/>\n              <path d=\"m15 5 4 4\"/>\n            </svg>\n          </button>\n        `\n      : \"\";\n\n    messageDiv.innerHTML = `\n    <div class=\"message-wrapper\">\n    <img id=\"message-user-avatar\" src=\"${avatarUrl}\" alt=\"User Avatar\" />\n      <div>\n        <div class=\"message-header\">\n        <span class=\"username\">${this.escapeHtml(messageData.username)}</span>\n        <span class=\"timestamp\">${timeString}</span>\n        <span class=\"message-controls\">${controls}</span>\n        </div>\n        <div class=\"content\">\n        ${this.escapeHtml(messageData.content)}\n        </div>\n      </div>  \n    </div>\n    `;\n\n    this.messageContainer.appendChild(messageDiv);\n\n    if (this.isOwnMessage(messageData.username)) {\n      const editBtn = messageDiv.querySelector(\".edit-btn\");\n      const deleteBtn = messageDiv.querySelector(\".delete-btn\");\n\n      editBtn?.addEventListener(\"click\", (e) => {\n        e.stopPropagation(); // Prevent message click event\n        this.handleMessageUpdate(messageData.id, \"update\");\n      });\n\n      deleteBtn?.addEventListener(\"click\", (e) => {\n        e.stopPropagation(); // Prevent message click event\n        this.deleteMessage(messageData.id);\n      });\n    }\n\n    this.scrollToBottom();\n  }\n\n  addMessageHistory(messages: MessageData[]): void {\n    this.clearMessages();\n\n    for (let i = 0; i <= messages.length; i++) {\n      this.addMessage(messages[i]);\n    }\n  }\n\n  saveEdit(messageId: string, newText: string): void {\n    this.socket.send(\n      JSON.stringify({\n        event: \"edit-message\",\n        id: messageId,\n        message: newText,\n      })\n    );\n  }\n\n  deleteMessage(messageId: string): void {\n    if (confirm(\"Are you sure you want to delete this message?\")) {\n      this.socket.send(\n        JSON.stringify({\n          event: \"delete-message\",\n          messageId: messageId,\n        })\n      );\n    }\n  }\n\n  handleMessageUpdate(id: string, newMessage: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${id}\"]`\n    );\n    if (messageDiv) {\n      const content = messageDiv.querySelector(\".content\");\n      if (content) {\n        content.textContent = newMessage;\n\n        if (!messageDiv.querySelector(\".edited\")) {\n          messageDiv\n            .querySelector(\".message-header\")\n            ?.insertAdjacentHTML(\n              \"beforeend\",\n              '<span class=\"edited\">(edited)</span>'\n            );\n        }\n      }\n    }\n  }\n\n  handleMessageDelete(messageId: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${messageId}\"]`\n    );\n\n    if (messageDiv) {\n      messageDiv.remove();\n    }\n  }\n\n  isOwnMessage(username: string): boolean {\n    return username === this.currentUsername;\n  }\n\n  private updateUnreadCount(): void {\n    const header = this.element.querySelector(\".window-header h3\");\n    if (header) {\n      if (this.unreadCount > 0) {\n        header.setAttribute(\"data-unread\", this.unreadCount.toString());\n        this.element.classList.add(\"has-unread\");\n      } else {\n        header.setAttribute(\"data-unread\", \"0\");\n        this.element.classList.remove(\"has-unread\");\n      }\n    }\n  }\n\n  clearUnread(): void {\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private scrollToBottom(): void {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  private escapeHtml(unsafe: string): string {\n    if (!unsafe) return \"\";\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  }\n}\n", "import { bgGreen } from \"jsr:@std/internal@^1.0.5/styles\";\nimport { ConversationWindow } from \"./ConversationWindow.ts\";\n\nexport class MultiConversationLayout {\n  private socket: WebSocket;\n  private currentUsername: string;\n  public activeConversations: Map<string, ConversationWindow>;\n  private windowOrder: string[];\n  private container: HTMLDivElement;\n  private maxConversations: number;\n  public activeConversation: string | null;\n  private inputArea: HTMLDivElement;\n  private input: HTMLInputElement;\n  private sendButton: HTMLButtonElement;\n\n  constructor(socket: WebSocket, username: string) {\n    this.socket = socket;\n    this.currentUsername = username;\n    this.activeConversations = new Map();\n\n    this.inputArea = document.createElement(\"div\");\n    this.inputArea.className = \"input-area\";\n    this.input = document.createElement(\"input\");\n    this.input.type = \"text\";\n    this.input.className = \"message-input\";\n    this.sendButton = document.createElement(\"button\");\n    this.sendButton.className = \"send-button\";\n    this.sendButton.textContent = \"Send\";\n\n    this.windowOrder = [];\n    const containerElement = document.getElementById(\n      \"multi-conversation-layout\"\n    );\n    if (!containerElement) {\n      throw new Error(\"Container element not found\");\n    }\n    this.container = containerElement as HTMLDivElement;\n    this.container.innerHTML = \"\";\n    this.maxConversations = 4;\n    this.activeConversation = null;\n    this.setupInput();\n    this.setupStyles();\n  }\n\n  private setupStyles(): void {\n    this.container.classList.add(\"conversation-grid\");\n  }\n\n  private setupInput(): void {\n    const inputArea = document.createElement(\"div\");\n    inputArea.className = \"global-input-area\";\n    inputArea.style.display = \"none\";\n    inputArea.innerHTML = `\n      <input \n        type=\"text\" \n        class=\"global-message-input\" \n        placeholder=\"Select a conversation...\" \n        disabled\n      >\n      <button class=\"global-send-btn\" disabled>Send</button>\n    `;\n\n    const main = document.querySelector(\"main\");\n    if (!main) {\n      throw new Error(\"Main element not found\");\n    }\n    main.appendChild(inputArea);\n\n    this.inputArea = inputArea;\n    this.input = inputArea.querySelector(\n      \".global-message-input\"\n    ) as HTMLInputElement;\n    this.sendButton = inputArea.querySelector(\n      \".global-send-btn\"\n    ) as HTMLButtonElement;\n\n    this.input.addEventListener(\"keypress\", (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n\n    this.sendButton.addEventListener(\"click\", () => {\n      if (this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n  }\n\n  private sendMessage(message: string): void {\n    if (!this.activeConversation) {\n      return;\n    }\n\n    if (!this.activeConversations.has(this.activeConversation)) {\n      return;\n    }\n    console.log(JSON.stringify({ message }));\n    console.debug(\"sending message to \", this.activeConversation);\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"send-message\",\n        message: message,\n        roomName: this.activeConversation,\n      })\n    );\n    this.input.value = \"\";\n  }\n\n  addConversation(roomName: string): void {\n    if (this.activeConversations.has(roomName)) {\n      this.setActiveConversation(roomName);\n      return;\n    }\n\n    if (this.activeConversations.size >= this.maxConversations) {\n      const oldestRoom = this.windowOrder[0];\n      this.removeConversation(oldestRoom);\n      this.windowOrder = this.windowOrder.slice(1);\n    }\n\n    const conversationWindow = new ConversationWindow(\n      roomName,\n      (name) => this.removeConversation(name),\n      (name) => this.setActiveConversation(name),\n      this.socket,\n      this.currentUsername\n    );\n\n    this.activeConversations.set(roomName, conversationWindow);\n    this.windowOrder.push(roomName);\n    this.container.insertBefore(\n      conversationWindow.element,\n      this.container.lastChild\n    );\n    this.updateLayout();\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"join-room\",\n        roomName: roomName,\n      })\n    );\n  }\n\n  addMessageHistory(roomName: string, messages: any[]): void {\n    const conversation = this.activeConversations.get(roomName);\n    if (conversation) {\n      conversation.clearMessages();\n      messages.forEach((msg) => conversation.addMessage(msg));\n    }\n  }\n\n  removeConversation(roomName: string): void {\n    const conversation = this.activeConversations.get(roomName);\n\n    if (conversation) {\n      conversation.element.remove();\n      this.activeConversations.delete(roomName);\n      this.windowOrder = this.windowOrder.filter((name) => name !== roomName);\n\n      if (this.activeConversation === roomName) {\n        const remainingRooms = Array.from(this.activeConversations.keys());\n        if (remainingRooms.length > 0) {\n          this.setActiveConversation(remainingRooms[0]);\n        } else {\n          this.setActiveConversation(null);\n        }\n      }\n\n      this.updateLayout();\n    }\n  }\n\n  setActiveConversation(roomName: string | null): void {\n    this.activeConversations.forEach((conversation) => {\n      conversation.element.classList.remove(\"active\");\n    });\n\n    document.querySelectorAll(\"#cabals li\").forEach((item) => {\n      item.classList.remove(\"active\");\n    });\n\n    this.activeConversation = roomName;\n\n    if (roomName && this.activeConversations.has(roomName)) {\n      const conversation = this.activeConversations.get(roomName);\n      if (!conversation) return;\n\n      this.input.disabled = false;\n      this.sendButton.disabled = false;\n      this.input.placeholder = `Message ${roomName}...`;\n\n      conversation.element.classList.add(\"active\");\n\n      const roomButton = Array.from(\n        document.querySelectorAll(\"#cabals li\")\n      ).find((item) => item.textContent?.startsWith(roomName));\n\n      if (roomButton) {\n        roomButton.classList.add(\"active\");\n      }\n\n      this.socket.send(\n        JSON.stringify({\n          event: \"join-room\",\n          roomName: roomName,\n        })\n      );\n\n      this.input.focus();\n    } else {\n      this.input.disabled = true;\n      this.sendButton.disabled = true;\n      this.input.placeholder = \"Select a conversation...\";\n    }\n  }\n\n  private updateLayout(): void {\n    this.container.classList.remove(\"grid-1\", \"grid-2\", \"grid-3\", \"grid-4\");\n    if (this.activeConversations.size > 0) {\n      const gridClass = `grid-${this.activeConversations.size}`;\n      this.container.classList.add(gridClass);\n      this.inputArea.style.display = \"flex\";\n    } else {\n      this.inputArea.style.display = \"none\";\n    }\n  }\n\n  addMessage(\n    roomName: string,\n    username: string,\n    avatar_url: string,\n    content: string,\n    messageId: string\n  ): void {\n    if (!this.activeConversations.has(roomName)) {\n      this.addConversation(roomName);\n    }\n\n    const conversation = this.activeConversations.get(roomName);\n    if (conversation) {\n      const messageData = {\n        id: messageId,\n        username: username,\n        avatar_url: avatar_url,\n        content: content,\n        timestamp: Date.now(),\n        roomName: roomName,\n      };\n\n      conversation.addMessage(messageData);\n\n      if (roomName !== this.activeConversation) {\n        conversation.element.classList.add(\"has-unread\");\n      }\n\n      conversation.element.classList.add(\"message-received\");\n      setTimeout(() => {\n        conversation.element.classList.remove(\"message-received\");\n      }, 300);\n    }\n  }\n}\n", "export interface ContextMenuOptions {\n  x: number;\n  y: number;\n  items: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\nexport class ContextMenu {\n  private element: HTMLElement;\n\n  constructor() {\n    this.element = document.createElement(\"div\");\n    this.element.className = \"context-menu\";\n    document.body.appendChild(this.element);\n  }\n\n  show(options: ContextMenuOptions): void {\n    this.element.style.left = `${options.x}px`;\n    this.element.style.top = `${options.y}px`;\n    this.element.innerHTML = \"\";\n\n    options.items.forEach((item) => {\n      const menuItem = document.createElement(\"div\");\n      menuItem.className = \"context-menu-item\";\n      menuItem.textContent = item.label;\n      menuItem.onclick = () => {\n        item.action();\n        this.hide();\n      };\n      this.element.appendChild(menuItem);\n    });\n\n    this.element.style.display = \"block\";\n  }\n\n  hide(): void {\n    this.element.style.display = \"none\";\n  }\n}\n", "import { MultiConversationLayout } from \"./Components/MultiConversationLayout.ts\";\nimport { Room } from \"../src/server/types/Room.ts\";\nimport { ContextMenu } from \"../src/server/types/Ui.ts\";\nimport { CreateRoomData } from \"../src/server/types/Message.ts\";\nimport { GitHubUser } from \"../src/server/types/GitHubUser.ts\";\n\n// Define interfaces for our message types\ninterface BaseEvent {\n  event: string;\n}\n\ninterface UpdateUsersEvent extends BaseEvent {\n  event: \"update-users\";\n  usernames: string[];\n}\n\ninterface UpdateRoomsEvent extends BaseEvent {\n  event: \"update-rooms\";\n  rooms: Room[];\n}\n\ninterface NewMessageEvent extends BaseEvent {\n  event: \"new-message\";\n  message: {\n    roomName: string;\n    username: string;\n    avatar_url: string;\n    content: string;\n    id: string;\n    timestamp: number;\n  };\n}\n\ninterface RoomHistoryEvent extends BaseEvent {\n  event: \"room-history\";\n  roomName: string;\n  messages: Array<{\n    id: string;\n    username: string;\n    content: string;\n    roomName: string;\n    timestamp: number;\n    edited?: boolean;\n  }>;\n}\n\ninterface EditMessageEvent extends BaseEvent {\n  event: \"edit-message\";\n  roomName: string;\n  id: string;\n  message: string;\n}\n\ninterface DeleteMessageEvent extends BaseEvent {\n  event: \"delete-message\";\n  roomName: string;\n  id: string;\n}\n\ninterface ErrorEvent extends BaseEvent {\n  event: \"error\";\n  message: string;\n}\n\ninterface ExpiredEvent extends BaseEvent {\n  event: \"expired\";\n  roomName: string;\n}\n\ntype ServerEvent =\n  | UpdateUsersEvent\n  | UpdateRoomsEvent\n  | NewMessageEvent\n  | RoomHistoryEvent\n  | EditMessageEvent\n  | DeleteMessageEvent\n  | ErrorEvent\n  | ExpiredEvent;\n\nfunction initializeChat(userDetails: GitHubUser) {\n  // Initialize WebSocket connection\n  console.log(userDetails);\n  const url = new URL(\n    `./start_web_socket?username=${userDetails.login}`,\n    location.href\n  );\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  const socket = new WebSocket(url.href);\n\n  // Create the layout manager\n  const conversationLayout = new MultiConversationLayout(\n    socket,\n    userDetails.login\n  );\n  const contextMenu = new ContextMenu();\n\n  // Hide context menu when clicking anywhere other than the user list elements\n  document.addEventListener(\"click\", () => contextMenu.hide());\n\n  const usernameDisplay = document.getElementById(\"username-display\");\n  if (usernameDisplay) {\n    usernameDisplay.textContent = userDetails.login;\n  }\n  const userAvatar = document.getElementById(\"user-avatar\") as HTMLImageElement;\n  if (userAvatar) {\n    userAvatar.src = userDetails.avatar_url;\n  }\n\n  let lastReceivedRoomData: Array<{\n    name: string;\n    lastActivity: number;\n    ttl: number;\n  }> | null = null;\n\n  socket.onerror = (error) => {\n    console.error(\"WebSocket error:\", error);\n  };\n\n  socket.onclose = (event) => {\n    console.log(\"WebSocket closed:\", event.code, event.reason);\n  };\n\n  socket.onmessage = (event: MessageEvent) => {\n    console.log(\"Received WebSocket message:\", event.data);\n    const data = JSON.parse(event.data) as ServerEvent;\n    switch (data.event) {\n      case \"update-users\":\n        updateUserList(data.usernames);\n        break;\n\n      case \"update-rooms\":\n        lastReceivedRoomData = data.rooms; // Store the data\n        updateRoomList(data.rooms);\n        break;\n\n      case \"new-message\":\n        conversationLayout.addMessage(\n          data.message.roomName,\n          data.message.username,\n          data.message.avatar_url,\n          data.message.content,\n          data.message.id\n        );\n        break;\n\n      case \"room-history\":\n        conversationLayout.addMessageHistory(data.roomName, data.messages);\n        break;\n\n      case \"edit-message\": {\n        const conversation = conversationLayout.activeConversations.get(\n          data.roomName\n        );\n        if (conversation) {\n          conversation.handleMessageUpdate(data.id, data.message);\n        }\n        break;\n      }\n\n      case \"delete-message\": {\n        const conv = conversationLayout.activeConversations.get(data.roomName);\n        if (conv) {\n          conv.handleMessageDelete(data.id);\n        }\n        break;\n      }\n\n      case \"error\":\n        console.error(\"Server error:\", data.message);\n        alert(data.message);\n        break;\n\n      case \"expired\":\n        console.info(\"Handling expired room:\", data.roomName);\n        conversationLayout.removeConversation(data.roomName);\n        break;\n    }\n  };\n\n  setInterval(() => {\n    if (lastReceivedRoomData) {\n      updateRoomList(lastReceivedRoomData);\n    }\n  }, 1000);\n\n  function updateRoomList(\n    rooms: Array<{ name: string; lastActivity: number; ttl: number }>\n  ): void {\n    const roomList = document.querySelector<HTMLUListElement>(\"#cabals\");\n    if (!roomList) return;\n\n    roomList.replaceChildren();\n\n    for (const room of rooms) {\n      const listItem = document.createElement(\"li\");\n      listItem.textContent = `${room.name}`;\n\n      // Calculate how much time has elapsed\n      const timeElapsed = Date.now() - room.lastActivity;\n      const ttlProgress = Math.min(timeElapsed / room.ttl, 1); // Value between 0 and 1\n\n      // Interpolate between start color (26, 26, 29) and end color (150, 35, 0)\n      const r = Math.round(26 + (128 - 26) * ttlProgress);\n      const g = Math.round(26 + (0 - 26) * ttlProgress);\n      const b = Math.round(29 + (32 - 29) * ttlProgress);\n\n      listItem.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;\n\n      if (conversationLayout.activeConversation === room.name) {\n        listItem.classList.add(\"active\");\n      }\n\n      listItem.onclick = () => {\n        const items = roomList.querySelectorAll(\"li\");\n        items.forEach((item) => {\n          item.classList.remove(\"active\");\n        });\n\n        listItem.classList.add(\"active\");\n        conversationLayout.addConversation(room.name);\n        conversationLayout.setActiveConversation(room.name);\n\n        socket.send(\n          JSON.stringify({\n            event: \"join-room\",\n            roomName: room.name,\n          })\n        );\n      };\n      roomList.appendChild(listItem);\n    }\n  }\n\n  function updateUserList(cohortNames: string[]): void {\n    const userList = document.querySelector<HTMLUListElement>(\"#users\");\n    if (!userList) return;\n\n    userList.replaceChildren();\n\n    for (const cohortName of cohortNames) {\n      // if current username skip\n      if (cohortName === userDetails.login) {\n        continue;\n      }\n      const listItem = document.createElement(\"li\");\n      listItem.textContent = cohortName;\n\n      listItem.addEventListener(\"contextmenu\", (event) => {\n        event.preventDefault();\n\n        contextMenu.show({\n          x: event.pageX,\n          y: event.pageY,\n          items: [\n            {\n              label: \"Confer\",\n              action: () => {\n                const roomName = `A colloquy between ${[\n                  userDetails.login,\n                  cohortName,\n                ]\n                  .sort()\n                  .join(\" and \")}`;\n                // Sort usernames to ensure consistent room names regardless of who initiates\n\n                socket.send(\n                  JSON.stringify({\n                    event: \"create-private-chat\",\n                    participants: [userDetails.login, cohortName],\n                    roomName: roomName,\n                  })\n                );\n\n                // Add conversation window\n                conversationLayout.addConversation(roomName);\n              },\n            },\n          ],\n        });\n      });\n\n      userList.appendChild(listItem);\n    }\n  }\n\n  // Create cabal button handler\n  const createCabalButton =\n    document.querySelector<HTMLButtonElement>(\"#create-cabal\");\n  if (createCabalButton) {\n    createCabalButton.onclick = () => {\n      const name = prompt(\"Enter cabal name:\");\n      if (name) {\n        const data: CreateRoomData = {\n          roomName: name,\n          roomType: \"cabal\",\n          initialMembers: [userDetails.login],\n        };\n        socket.send(\n          JSON.stringify({\n            event: \"create-room\",\n            ...data,\n          })\n        );\n      }\n    };\n  }\n}\n\n// New auth check and initialization\nasync function checkAuth(): Promise<GitHubUser | null> {\n  try {\n    const response = await fetch(\"/api/auth\");\n\n    if (response.status === 401) {\n      globalThis.location.href = \"/signin\";\n      return null;\n    }\n\n    const userDetails = await response.json();\n    return userDetails;\n  } catch (error) {\n    console.error(\"Auth check failed:\", error);\n    globalThis.location.href = \"/signin\";\n    return null;\n  }\n}\n\n// Main initialization\nasync function init() {\n  const userDetails = await checkAuth();\n  if (!userDetails) {\n    return;\n  }\n  if (userDetails) {\n    await initializeChat(userDetails);\n  }\n}\n\ninit();\n"],
  "mappings": "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",
  "names": ["ConversationWindow", "roomName", "onClose", "onActivate", "socket", "currentUsername", "div", "e", "closeBtn", "messageData", "messageDiv", "timeString", "timestamp", "avatarUrl", "controls", "editBtn", "deleteBtn", "messages", "i", "messageId", "newText", "id", "newMessage", "content", "username", "header", "unsafe", "MultiConversationLayout", "socket", "username", "containerElement", "inputArea", "main", "e", "message", "roomName", "oldestRoom", "conversationWindow", "ConversationWindow", "name", "messages", "conversation", "msg", "remainingRooms", "item", "roomButton", "gridClass", "avatar_url", "content", "messageId", "messageData", "ContextMenu", "options", "item", "menuItem", "initializeChat", "userDetails", "url", "socket", "conversationLayout", "MultiConversationLayout", "contextMenu", "ContextMenu", "usernameDisplay", "userAvatar", "lastReceivedRoomData", "error", "event", "data", "updateUserList", "updateRoomList", "conversation", "conv", "rooms", "roomList", "room", "listItem", "timeElapsed", "ttlProgress", "r", "g", "b", "item", "cohortNames", "userList", "cohortName", "roomName", "createCabalButton", "name", "checkAuth", "response", "init"]
}
