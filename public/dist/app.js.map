{
  "version": 3,
  "sources": ["../Components/ConversationWindow.ts", "../Components/MultiConversationLayout.ts", "../app.ts"],
  "sourcesContent": ["interface MessageData {\n  id: string;\n  username: string;\n  content: string;\n  timestamp: number;\n  roomName: string;\n  edited?: boolean;\n}\n\nexport class ConversationWindow {\n  private cabalName: string;\n  private onClose: (name: string) => void;\n  private onActivate: (name: string) => void;\n  private socket: WebSocket;\n  private currentUsername: string;\n  public element: HTMLDivElement;\n  private messageContainer: HTMLDivElement;\n  private unreadCount: number;\n\n  constructor(\n    cabalName: string,\n    onClose: (name: string) => void,\n    onActivate: (name: string) => void,\n    socket: WebSocket,\n    currentUsername: string\n  ) {\n    this.cabalName = cabalName;\n    this.onClose = onClose;\n    this.onActivate = onActivate;\n    this.socket = socket;\n    this.currentUsername = currentUsername;\n    this.element = this.createElement();\n    this.messageContainer = this.element.querySelector(\n      \".messages\"\n    ) as HTMLDivElement;\n    this.unreadCount = 0;\n    this.setupEventListeners();\n  }\n\n  clearMessages(): void {\n    this.messageContainer.innerHTML = \"\";\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private createElement(): HTMLDivElement {\n    const div = document.createElement(\"div\");\n    div.className = \"conversation-window\";\n    div.innerHTML = `\n      <div class=\"window-header\">\n        <h3 data-unread=\"0\">${this.cabalName}</h3>\n        <button class=\"close-btn\" aria-label=\"Close conversation\">\u00D7</button>\n      </div>\n      <div class=\"messages\"></div>\n    `;\n    return div;\n  }\n\n  private setupEventListeners(): void {\n    this.element.addEventListener(\"click\", (e: MouseEvent) => {\n      const target = e.target as HTMLElement;\n      if (!target.closest(\".close-btn\")) {\n        this.clearUnread();\n        this.onActivate(this.cabalName);\n      }\n    });\n\n    const closeBtn = this.element.querySelector(\".close-btn\");\n    if (closeBtn) {\n      closeBtn.addEventListener(\"click\", (e: Event) => {\n        e.stopPropagation();\n        this.onClose(this.cabalName);\n      });\n    }\n  }\n\n  addMessage(messageData: MessageData): void {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.className = \"message\";\n    messageDiv.dataset.messageId = messageData.id;\n\n    let timeString = \"Unknown time\";\n    const timestamp = new Date(messageData.timestamp);\n    timeString = timestamp.toLocaleTimeString();\n\n    messageDiv.innerHTML = `\n      <div class=\"message-header\">\n        <span class=\"username\">${this.escapeHtml(messageData.username)}</span>\n        <span class=\"timestamp\">${timeString}</span>\n        ${messageData.edited ? '<span class=\"edited\">(edited)</span>' : \"\"}\n      </div>\n      <div class=\"content\">\n        ${this.escapeHtml(messageData.content)}\n      </div>\n    `;\n\n    this.messageContainer.appendChild(messageDiv);\n    this.scrollToBottom();\n  }\n\n  addMessageHistory(messages: MessageData[]): void {\n    this.clearMessages();\n    messages.forEach((msg) => this.addMessage(msg));\n  }\n\n  saveEdit(messageId: string, newText: string): void {\n    this.socket.send(\n      JSON.stringify({\n        event: \"edit-message\",\n        id: messageId,\n        message: newText,\n      })\n    );\n  }\n\n  deleteMessage(messageId: string): void {\n    if (confirm(\"Are you sure you want to delete this message?\")) {\n      this.socket.send(\n        JSON.stringify({\n          event: \"delete-message\",\n          id: messageId,\n        })\n      );\n    }\n  }\n\n  handleMessageUpdate(id: string, newMessage: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${id}\"]`\n    );\n    if (messageDiv) {\n      const content = messageDiv.querySelector(\".content\");\n      if (content) {\n        content.textContent = newMessage;\n\n        if (!messageDiv.querySelector(\".edited\")) {\n          messageDiv\n            .querySelector(\".message-header\")\n            ?.insertAdjacentHTML(\n              \"beforeend\",\n              '<span class=\"edited\">(edited)</span>'\n            );\n        }\n      }\n    }\n  }\n\n  handleMessageDelete(id: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${id}\"]`\n    );\n    if (messageDiv) {\n      const content = messageDiv.querySelector(\".content\");\n      if (content) {\n        content.textContent = \"This message was deleted\";\n        content.classList.add(\"deleted\");\n\n        const actions = messageDiv.querySelector(\".message-actions\");\n        if (actions) actions.remove();\n      }\n    }\n  }\n\n  isOwnMessage(username: string): boolean {\n    return username === this.currentUsername;\n  }\n\n  private updateUnreadCount(): void {\n    const header = this.element.querySelector(\".window-header h3\");\n    if (header) {\n      if (this.unreadCount > 0) {\n        header.setAttribute(\"data-unread\", this.unreadCount.toString());\n        this.element.classList.add(\"has-unread\");\n      } else {\n        header.setAttribute(\"data-unread\", \"0\");\n        this.element.classList.remove(\"has-unread\");\n      }\n    }\n  }\n\n  clearUnread(): void {\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private scrollToBottom(): void {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  private escapeHtml(unsafe: string): string {\n    if (!unsafe) return \"\";\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  }\n}\n", "import { ConversationWindow } from \"./ConversationWindow.ts\";\n\nexport class MultiConversationLayout {\n  private socket: WebSocket;\n  private currentUsername: string;\n  public activeConversations: Map<string, ConversationWindow>;\n  private windowOrder: string[];\n  private container: HTMLDivElement;\n  private maxConversations: number;\n  public activeConversation: string | null;\n  private inputArea: HTMLDivElement;\n  private input: HTMLInputElement;\n  private sendButton: HTMLButtonElement;\n\n  constructor(socket: WebSocket, username: string) {\n    this.socket = socket;\n    this.currentUsername = username;\n    this.activeConversations = new Map();\n\n    this.inputArea = document.createElement(\"div\");\n    this.inputArea.className = \"input-area\";\n    this.input = document.createElement(\"input\");\n    this.input.type = \"text\";\n    this.input.className = \"message-input\";\n    this.sendButton = document.createElement(\"button\");\n    this.sendButton.className = \"send-button\";\n    this.sendButton.textContent = \"Send\";\n\n    this.windowOrder = [];\n    const containerElement = document.getElementById(\n      \"multi-conversation-layout\"\n    );\n    if (!containerElement) {\n      throw new Error(\"Container element not found\");\n    }\n    this.container = containerElement as HTMLDivElement;\n    this.container.innerHTML = \"\";\n    this.maxConversations = 4;\n    this.activeConversation = null;\n    this.setupInput();\n    this.setupStyles();\n  }\n\n  private setupStyles(): void {\n    this.container.classList.add(\"conversation-grid\");\n  }\n\n  private setupInput(): void {\n    const inputArea = document.createElement(\"div\");\n    inputArea.className = \"global-input-area\";\n    inputArea.style.display = \"none\";\n    inputArea.innerHTML = `\n      <input \n        type=\"text\" \n        class=\"global-message-input\" \n        placeholder=\"Select a conversation...\" \n        disabled\n      >\n      <button class=\"global-send-btn\" disabled>Send</button>\n    `;\n\n    const main = document.querySelector(\"main\");\n    if (!main) {\n      throw new Error(\"Main element not found\");\n    }\n    main.appendChild(inputArea);\n\n    this.inputArea = inputArea;\n    this.input = inputArea.querySelector(\n      \".global-message-input\"\n    ) as HTMLInputElement;\n    this.sendButton = inputArea.querySelector(\n      \".global-send-btn\"\n    ) as HTMLButtonElement;\n\n    this.input.addEventListener(\"keypress\", (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n\n    this.sendButton.addEventListener(\"click\", () => {\n      if (this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n  }\n\n  private sendMessage(message: string): void {\n    if (!this.activeConversation) {\n      return;\n    }\n\n    if (!this.activeConversations.has(this.activeConversation)) {\n      return;\n    }\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"send-message\",\n        message: message,\n        cabalName: this.activeConversation,\n      })\n    );\n    this.input.value = \"\";\n  }\n\n  addConversation(cabalName: string): void {\n    if (this.activeConversations.has(cabalName)) {\n      this.setActiveConversation(cabalName);\n      return;\n    }\n\n    if (this.activeConversations.size >= this.maxConversations) {\n      const oldestCabal = this.windowOrder[0];\n      this.removeConversation(oldestCabal);\n      this.windowOrder = this.windowOrder.slice(1);\n    }\n\n    const conversationWindow = new ConversationWindow(\n      cabalName,\n      (name) => this.removeConversation(name),\n      (name) => this.setActiveConversation(name),\n      this.socket,\n      this.currentUsername\n    );\n\n    this.activeConversations.set(cabalName, conversationWindow);\n    this.windowOrder.push(cabalName);\n    this.container.insertBefore(\n      conversationWindow.element,\n      this.container.lastChild\n    );\n    this.updateLayout();\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"join-cabal\",\n        cabalName: cabalName,\n      })\n    );\n  }\n\n  addMessageHistory(cabalName: string, messages: any[]): void {\n    const conversation = this.activeConversations.get(cabalName);\n    if (conversation) {\n      conversation.clearMessages();\n      messages.forEach((msg) => conversation.addMessage(msg));\n    }\n  }\n\n  removeConversation(cabalName: string): void {\n    const conversation = this.activeConversations.get(cabalName);\n\n    if (conversation) {\n      conversation.element.remove();\n      this.activeConversations.delete(cabalName);\n      this.windowOrder = this.windowOrder.filter((name) => name !== cabalName);\n\n      if (this.activeConversation === cabalName) {\n        const remainingCabals = Array.from(this.activeConversations.keys());\n        if (remainingCabals.length > 0) {\n          this.setActiveConversation(remainingCabals[0]);\n        } else {\n          this.setActiveConversation(null);\n        }\n      }\n\n      this.updateLayout();\n    }\n  }\n\n  setActiveConversation(cabalName: string | null): void {\n    this.activeConversations.forEach((conversation) => {\n      conversation.element.classList.remove(\"active\");\n    });\n\n    document.querySelectorAll(\"#cabals li\").forEach((item) => {\n      item.classList.remove(\"active\");\n    });\n\n    this.activeConversation = cabalName;\n\n    if (cabalName && this.activeConversations.has(cabalName)) {\n      const conversation = this.activeConversations.get(cabalName);\n      if (!conversation) return;\n\n      this.input.disabled = false;\n      this.sendButton.disabled = false;\n      this.input.placeholder = `Message ${cabalName}...`;\n\n      conversation.element.classList.add(\"active\");\n\n      const cabalButton = Array.from(\n        document.querySelectorAll(\"#cabals li\")\n      ).find((item) => item.textContent?.startsWith(cabalName));\n\n      if (cabalButton) {\n        cabalButton.classList.add(\"active\");\n      }\n\n      this.socket.send(\n        JSON.stringify({\n          event: \"join-cabal\",\n          cabalName: cabalName,\n        })\n      );\n\n      this.input.focus();\n    } else {\n      this.input.disabled = true;\n      this.sendButton.disabled = true;\n      this.input.placeholder = \"Select a conversation...\";\n    }\n  }\n\n  private updateLayout(): void {\n    this.container.classList.remove(\"grid-1\", \"grid-2\", \"grid-3\", \"grid-4\");\n    if (this.activeConversations.size > 0) {\n      const gridClass = `grid-${this.activeConversations.size}`;\n      this.container.classList.add(gridClass);\n      this.inputArea.style.display = \"flex\";\n    } else {\n      this.inputArea.style.display = \"none\";\n    }\n  }\n\n  addMessage(cabalName: string, username: string, content: string): void {\n    if (!this.activeConversations.has(cabalName)) {\n      this.addConversation(cabalName);\n    }\n\n    const conversation = this.activeConversations.get(cabalName);\n    if (conversation) {\n      const messageData = {\n        id: crypto.randomUUID(),\n        username: username,\n        content: content,\n        timestamp: Date.now(),\n        roomName: cabalName,\n      };\n\n      conversation.addMessage(messageData);\n\n      if (cabalName !== this.activeConversation) {\n        conversation.element.classList.add(\"has-unread\");\n      }\n\n      conversation.element.classList.add(\"message-received\");\n      setTimeout(() => {\n        conversation.element.classList.remove(\"message-received\");\n      }, 300);\n    }\n  }\n}\n", "import { MultiConversationLayout } from \"./Components/MultiConversationLayout.ts\";\n\n// Define interfaces for our message types\ninterface BaseEvent {\n  event: string;\n}\n\ninterface UpdateUsersEvent extends BaseEvent {\n  event: \"update-users\";\n  usernames: string[];\n}\n\ninterface UpdateCabalsEvent extends BaseEvent {\n  event: \"update-cabals\";\n  cabals: Array<{ name: string }>;\n}\n\ninterface NewMessageEvent extends BaseEvent {\n  event: \"new-message\";\n  message: {\n    roomName: string;\n    username: string;\n    content: string;\n    id: string;\n    timestamp: number;\n  };\n}\n\ninterface CabalHistoryEvent extends BaseEvent {\n  event: \"cabal-history\";\n  cabalName: string;\n  messages: Array<{\n    id: string;\n    username: string;\n    content: string;\n    roomName: string;\n    timestamp: number;\n    edited?: boolean;\n  }>;\n}\n\ninterface EditMessageEvent extends BaseEvent {\n  event: \"edit-message\";\n  cabalName: string;\n  id: string;\n  message: string;\n}\n\ninterface DeleteMessageEvent extends BaseEvent {\n  event: \"delete-message\";\n  cabalName: string;\n  id: string;\n}\n\ninterface ErrorEvent extends BaseEvent {\n  event: \"error\";\n  message: string;\n}\n\ninterface ExpiredEvent extends BaseEvent {\n  event: \"expired\";\n  cabalName: string;\n}\n\ntype ServerEvent =\n  | UpdateUsersEvent\n  | UpdateCabalsEvent\n  | NewMessageEvent\n  | CabalHistoryEvent\n  | EditMessageEvent\n  | DeleteMessageEvent\n  | ErrorEvent\n  | ExpiredEvent;\n\n// Initialize WebSocket connection\nconst username = prompt(\"Please enter your name\") ?? \"Anonymous\";\nconst url = new URL(`./start_web_socket?username=${username}`, location.href);\nurl.protocol = url.protocol.replace(\"http\", \"ws\");\nexport const socket = new WebSocket(url.href);\n\n// Create the layout manager\nconst conversationLayout = new MultiConversationLayout(socket, username);\n\nsocket.onmessage = (event: MessageEvent) => {\n  const data = JSON.parse(event.data) as ServerEvent;\n\n  switch (data.event) {\n    case \"update-users\":\n      updateUserList(data.usernames);\n      break;\n\n    case \"update-cabals\":\n      updateCabalList(data.cabals);\n      break;\n\n    case \"new-message\":\n      conversationLayout.addMessage(\n        data.message.roomName,\n        data.message.username,\n        data.message.content\n      );\n      break;\n\n    case \"cabal-history\":\n      conversationLayout.addMessageHistory(data.cabalName, data.messages);\n      break;\n\n    case \"edit-message\": {\n      const conversation = conversationLayout.activeConversations.get(\n        data.cabalName\n      );\n      if (conversation) {\n        conversation.handleMessageUpdate(data.id, data.message);\n      }\n      break;\n    }\n\n    case \"delete-message\": {\n      const conv = conversationLayout.activeConversations.get(data.cabalName);\n      if (conv) {\n        conv.handleMessageDelete(data.id);\n      }\n      break;\n    }\n\n    case \"error\":\n      console.error(\"Server error:\", data.message);\n      alert(data.message);\n      break;\n\n    case \"expired\":\n      console.log(\"Handling expired room:\", data.cabalName);\n      conversationLayout.removeConversation(data.cabalName);\n      break;\n  }\n};\n\nfunction updateCabalList(cabals: Array<{ name: string }>): void {\n  const cabalList = document.querySelector<HTMLUListElement>(\"#cabals\");\n  if (!cabalList) return;\n\n  cabalList.replaceChildren();\n\n  for (const cabal of cabals) {\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = `${cabal.name}`;\n\n    if (conversationLayout.activeConversation === cabal.name) {\n      listItem.classList.add(\"active\");\n    }\n\n    listItem.onclick = () => {\n      const items = cabalList.querySelectorAll(\"li\");\n      items.forEach((item) => {\n        item.classList.remove(\"active\");\n      });\n\n      listItem.classList.add(\"active\");\n      conversationLayout.addConversation(cabal.name);\n      conversationLayout.setActiveConversation(cabal.name);\n\n      socket.send(\n        JSON.stringify({\n          event: \"join-cabal\",\n          cabalName: cabal.name,\n        })\n      );\n    };\n    cabalList.appendChild(listItem);\n  }\n}\n\nfunction updateUserList(usernames: string[]): void {\n  const userList = document.querySelector<HTMLUListElement>(\"#users\");\n  if (!userList) return;\n\n  userList.replaceChildren();\n\n  for (const username of usernames) {\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = username;\n    userList.appendChild(listItem);\n  }\n}\n\n// Create cabal button handler\nconst createCabalButton =\n  document.querySelector<HTMLButtonElement>(\"#create-cabal\");\nif (createCabalButton) {\n  createCabalButton.onclick = () => {\n    const cabalName = prompt(\"Enter cabal name:\");\n    if (cabalName) {\n      socket.send(\n        JSON.stringify({\n          event: \"create-cabal\",\n          cabalName,\n        })\n      );\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["ConversationWindow", "cabalName", "onClose", "onActivate", "socket", "currentUsername", "div", "e", "closeBtn", "messageData", "messageDiv", "timeString", "messages", "msg", "messageId", "newText", "id", "newMessage", "content", "actions", "username", "header", "unsafe", "MultiConversationLayout", "socket", "username", "containerElement", "inputArea", "main", "e", "message", "cabalName", "oldestCabal", "conversationWindow", "ConversationWindow", "name", "messages", "conversation", "msg", "remainingCabals", "item", "cabalButton", "gridClass", "content", "messageData", "username", "url", "socket", "conversationLayout", "MultiConversationLayout", "event", "data", "updateUserList", "updateCabalList", "conversation", "conv", "cabals", "cabalList", "cabal", "listItem", "item", "usernames", "userList", "createCabalButton", "cabalName"]
}
