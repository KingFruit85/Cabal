{
  "version": 3,
  "sources": ["https://jsr.io/@std/internal/1.0.5/styles.ts", "../Components/ConversationWindow.ts", "../Components/MultiConversationLayout.ts", "../../src/server/types/Ui.ts", "../app.ts"],
  "sourcesContent": ["// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n// A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors\n// on npm.\n\n// This code is vendored from `fmt/colors.ts`.\n\n// deno-lint-ignore no-explicit-any\nconst { Deno } = globalThis as any;\nconst noColor = typeof Deno?.noColor === \"boolean\"\n  ? Deno.noColor as boolean\n  : false;\n\ninterface Code {\n  open: string;\n  close: string;\n  regexp: RegExp;\n}\n\nconst enabled = !noColor;\n\nfunction code(open: number[], close: number): Code {\n  return {\n    open: `\\x1b[${open.join(\";\")}m`,\n    close: `\\x1b[${close}m`,\n    regexp: new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n  };\n}\n\nfunction run(str: string, code: Code): string {\n  return enabled\n    ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`\n    : str;\n}\n\n/**\n * Sets the style of text to be printed to bold.\n *\n * Disable by setting the `NO_COLOR` environmental variable.\n *\n * @param str Text to make bold\n *\n * @returns Bold text for printing\n *\n * @example Usage\n * ```ts no-assert\n * import { bold } from \"@std/internal/styles\";\n *\n * console.log(bold(\"Hello, world!\")); // Prints \"Hello, world!\" in bold\n * ```\n */\nexport function bold(str: string): string {\n  return run(str, code([1], 22));\n}\n\n/**\n * Sets the color of text to be printed to red.\n *\n * Disable by setting the `NO_COLOR` environmental variable.\n *\n * @param str Text to make red\n *\n * @returns Red text for printing\n *\n * @example Usage\n * ```ts no-assert\n * import { red } from \"@std/internal/styles\";\n *\n * console.log(red(\"Hello, world!\")); // Prints \"Hello, world!\" in red\n * ```\n */\nexport function red(str: string): string {\n  return run(str, code([31], 39));\n}\n\n/**\n * Sets the color of text to be printed to green.\n *\n * Disable by setting the `NO_COLOR` environmental variable.\n *\n * @param str Text to make green\n *\n * @returns Green text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { green } from \"@std/internal/styles\";\n *\n * console.log(green(\"Hello, world!\")); // Prints \"Hello, world!\" in green\n * ```\n */\nexport function green(str: string): string {\n  return run(str, code([32], 39));\n}\n\n/**\n * Sets the color of text to be printed to yellow.\n *\n * Disable by setting the `NO_COLOR` environmental variable.\n *\n * @param str Text to make yellow\n *\n * @returns Yellow text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { yellow } from \"@std/internal/styles\";\n *\n * console.log(yellow(\"Hello, world!\")); // Prints \"Hello, world!\" in yellow\n * ```\n */\nexport function yellow(str: string): string {\n  return run(str, code([33], 39));\n}\n\n/**\n * Sets the color of text to be printed to white.\n *\n * @param str Text to make white\n *\n * @returns White text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { white } from \"@std/internal/styles\";\n *\n * console.log(white(\"Hello, world!\")); // Prints \"Hello, world!\" in white\n * ```\n */\nexport function white(str: string): string {\n  return run(str, code([37], 39));\n}\n\n/**\n * Sets the color of text to be printed to gray.\n *\n * @param str Text to make gray\n *\n * @returns Gray text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { gray } from \"@std/internal/styles\";\n *\n * console.log(gray(\"Hello, world!\")); // Prints \"Hello, world!\" in gray\n * ```\n */\nexport function gray(str: string): string {\n  return brightBlack(str);\n}\n\n/**\n * Sets the color of text to be printed to bright-black.\n *\n * @param str Text to make bright-black\n *\n * @returns Bright-black text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { brightBlack } from \"@std/internal/styles\";\n *\n * console.log(brightBlack(\"Hello, world!\")); // Prints \"Hello, world!\" in bright-black\n * ```\n */\nexport function brightBlack(str: string): string {\n  return run(str, code([90], 39));\n}\n\n/**\n * Sets the background color of text to be printed to red.\n *\n * @param str Text to make its background red\n *\n * @returns Red background text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { bgRed } from \"@std/internal/styles\";\n *\n * console.log(bgRed(\"Hello, world!\")); // Prints \"Hello, world!\" with red background\n * ```\n */\nexport function bgRed(str: string): string {\n  return run(str, code([41], 49));\n}\n\n/**\n * Sets the background color of text to be printed to green.\n *\n * @param str Text to make its background green\n *\n * @returns Green background text for print\n *\n * @example Usage\n * ```ts no-assert\n * import { bgGreen } from \"@std/internal/styles\";\n *\n * console.log(bgGreen(\"Hello, world!\")); // Prints \"Hello, world!\" with green background\n * ```\n */\nexport function bgGreen(str: string): string {\n  return run(str, code([42], 49));\n}\n\n// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js\nconst ANSI_PATTERN = new RegExp(\n  [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TXZcf-nq-uy=><~]))\",\n  ].join(\"|\"),\n  \"g\",\n);\n\n/**\n * Remove ANSI escape codes from the string.\n *\n * @param string Text to remove ANSI escape codes from\n *\n * @returns Text without ANSI escape codes\n *\n * @example Usage\n * ```ts no-assert\n * import { red, stripAnsiCode } from \"@std/internal/styles\";\n *\n * console.log(stripAnsiCode(red(\"Hello, world!\"))); // Prints \"Hello, world!\"\n * ```\n */\nexport function stripAnsiCode(string: string): string {\n  return string.replace(ANSI_PATTERN, \"\");\n}\n\n// denoCacheMetadata={\"headers\":{\"age\":\"2130\",\"content-type\":\"text/typescript\",\"server\":\"UploadServer\",\"access-control-allow-origin\":\"*\",\"x-goog-generation\":\"1730457481657914\",\"x-goog-hash\":\"crc32c=fXpaTw==,md5=hA4fIFIT4Ne/3pybLp3B2A==\",\"etag\":\"\\\"840e1f205213e0d7bfde9c9b2e9dc1d8\\\"\",\"x-goog-stored-content-length\":\"5515\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"x-robots-tag\":\"noindex\",\"access-control-expose-headers\":\"*\",\"expires\":\"Tue, 11 Nov 2025 19:40:30 GMT\",\"cross-origin-resource-policy\":\"cross-origin\",\"x-jsr-cache-id\":\"LHR\",\"x-content-type-options\":\"nosniff\",\"x-jsr-cache-status\":\"hit\",\"x-guploader-uploadid\":\"AHmUCY0vHMCyDn3JptSmlI-MmrwDHKJN63Ay7nB9MONK-Brj4kw4s8NkMLZFXtLCjIo9nI5MCTF8BBzNrw\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"x-goog-stored-content-encoding\":\"identity\",\"accept-ranges\":\"bytes\",\"via\":\"1.1 google\",\"date\":\"Mon, 11 Nov 2024 19:40:30 GMT\",\"content-length\":\"5515\",\"x-goog-metageneration\":\"1\",\"last-modified\":\"Fri, 01 Nov 2024 10:38:01 GMT\",\"cache-control\":\"public, max-age=31536000, immutable\",\"x-goog-storage-class\":\"STANDARD\"},\"url\":\"https://jsr.io/@std/internal/1.0.5/styles.ts\",\"time\":1731356160}", "interface MessageData {\n  id: string;\n  username: string;\n  content: string;\n  timestamp: number;\n  roomName: string;\n  edited?: boolean;\n}\n\nexport class ConversationWindow {\n  private roomName: string;\n  private onClose: (name: string) => void;\n  private onActivate: (name: string) => void;\n  private socket: WebSocket;\n  private currentUsername: string;\n  public element: HTMLDivElement;\n  private messageContainer: HTMLDivElement;\n  private unreadCount: number;\n\n  constructor(\n    roomName: string,\n    onClose: (name: string) => void,\n    onActivate: (name: string) => void,\n    socket: WebSocket,\n    currentUsername: string\n  ) {\n    this.roomName = roomName;\n    this.onClose = onClose;\n    this.onActivate = onActivate;\n    this.socket = socket;\n    this.currentUsername = currentUsername;\n    this.element = this.createElement();\n    this.messageContainer = this.element.querySelector(\n      \".messages\"\n    ) as HTMLDivElement;\n    this.unreadCount = 0;\n    this.setupEventListeners();\n  }\n\n  clearMessages(): void {\n    this.messageContainer.innerHTML = \"\";\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private createElement(): HTMLDivElement {\n    const div = document.createElement(\"div\");\n    div.className = \"conversation-window\";\n    div.innerHTML = `\n      <div class=\"window-header\">\n        <h3 data-unread=\"0\">${this.roomName}</h3>\n        <button class=\"close-btn\" aria-label=\"Close conversation\">\u00D7</button>\n      </div>\n      <div class=\"messages\"></div>\n    `;\n    return div;\n  }\n\n  private setupEventListeners(): void {\n    this.element.addEventListener(\"click\", (e: MouseEvent) => {\n      const target = e.target as HTMLElement;\n      if (!target.closest(\".close-btn\")) {\n        this.clearUnread();\n        this.onActivate(this.roomName);\n        this.addMessageHistory;\n      }\n    });\n\n    const closeBtn = this.element.querySelector(\".close-btn\");\n    if (closeBtn) {\n      closeBtn.addEventListener(\"click\", (e: Event) => {\n        e.stopPropagation();\n        this.onClose(this.roomName);\n      });\n    }\n  }\n\n  addMessage(messageData: MessageData): void {\n    console.log(\"in add message\");\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.className = \"message\";\n    messageDiv.dataset.messageId = messageData.id;\n\n    let timeString = \"Unknown time\";\n    const timestamp = new Date(messageData.timestamp);\n    timeString = timestamp.toLocaleTimeString();\n\n    messageDiv.innerHTML = `\n      <div class=\"message-header\">\n        <span class=\"username\">${this.escapeHtml(messageData.username)}</span>\n        <span class=\"timestamp\">${timeString}</span>\n        ${messageData.edited ? '<span class=\"edited\">(edited)</span>' : \"\"}\n      </div>\n      <div class=\"content\">\n        ${this.escapeHtml(messageData.content)}\n      </div>\n    `;\n\n    this.messageContainer.appendChild(messageDiv);\n    this.scrollToBottom();\n  }\n\n  addMessageHistory(messages: MessageData[]): void {\n    this.clearMessages();\n\n    for (let i = 0; i <= messages.length; i++) {\n      console.log(messages[i].content);\n      this.addMessage(messages[i]);\n    }\n\n    // messages.forEach((msg) => this.addMessage(msg));\n  }\n\n  saveEdit(messageId: string, newText: string): void {\n    this.socket.send(\n      JSON.stringify({\n        event: \"edit-message\",\n        id: messageId,\n        message: newText,\n      })\n    );\n  }\n\n  deleteMessage(messageId: string): void {\n    if (confirm(\"Are you sure you want to delete this message?\")) {\n      this.socket.send(\n        JSON.stringify({\n          event: \"delete-message\",\n          id: messageId,\n        })\n      );\n    }\n  }\n\n  handleMessageUpdate(id: string, newMessage: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${id}\"]`\n    );\n    if (messageDiv) {\n      const content = messageDiv.querySelector(\".content\");\n      if (content) {\n        content.textContent = newMessage;\n\n        if (!messageDiv.querySelector(\".edited\")) {\n          messageDiv\n            .querySelector(\".message-header\")\n            ?.insertAdjacentHTML(\n              \"beforeend\",\n              '<span class=\"edited\">(edited)</span>'\n            );\n        }\n      }\n    }\n  }\n\n  handleMessageDelete(id: string): void {\n    const messageDiv = this.messageContainer.querySelector(\n      `[data-message-id=\"${id}\"]`\n    );\n    if (messageDiv) {\n      const content = messageDiv.querySelector(\".content\");\n      if (content) {\n        content.textContent = \"This message was deleted\";\n        content.classList.add(\"deleted\");\n\n        const actions = messageDiv.querySelector(\".message-actions\");\n        if (actions) actions.remove();\n      }\n    }\n  }\n\n  isOwnMessage(username: string): boolean {\n    return username === this.currentUsername;\n  }\n\n  private updateUnreadCount(): void {\n    const header = this.element.querySelector(\".window-header h3\");\n    if (header) {\n      if (this.unreadCount > 0) {\n        header.setAttribute(\"data-unread\", this.unreadCount.toString());\n        this.element.classList.add(\"has-unread\");\n      } else {\n        header.setAttribute(\"data-unread\", \"0\");\n        this.element.classList.remove(\"has-unread\");\n      }\n    }\n  }\n\n  clearUnread(): void {\n    this.unreadCount = 0;\n    this.updateUnreadCount();\n  }\n\n  private scrollToBottom(): void {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  private escapeHtml(unsafe: string): string {\n    if (!unsafe) return \"\";\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  }\n}\n", "import { bgGreen } from \"jsr:@std/internal@^1.0.5/styles\";\nimport { ConversationWindow } from \"./ConversationWindow.ts\";\n\nexport class MultiConversationLayout {\n  private socket: WebSocket;\n  private currentUsername: string;\n  public activeConversations: Map<string, ConversationWindow>;\n  private windowOrder: string[];\n  private container: HTMLDivElement;\n  private maxConversations: number;\n  public activeConversation: string | null;\n  private inputArea: HTMLDivElement;\n  private input: HTMLInputElement;\n  private sendButton: HTMLButtonElement;\n\n  constructor(socket: WebSocket, username: string) {\n    this.socket = socket;\n    this.currentUsername = username;\n    this.activeConversations = new Map();\n\n    this.inputArea = document.createElement(\"div\");\n    this.inputArea.className = \"input-area\";\n    this.input = document.createElement(\"input\");\n    this.input.type = \"text\";\n    this.input.className = \"message-input\";\n    this.sendButton = document.createElement(\"button\");\n    this.sendButton.className = \"send-button\";\n    this.sendButton.textContent = \"Send\";\n\n    this.windowOrder = [];\n    const containerElement = document.getElementById(\n      \"multi-conversation-layout\"\n    );\n    if (!containerElement) {\n      throw new Error(\"Container element not found\");\n    }\n    this.container = containerElement as HTMLDivElement;\n    this.container.innerHTML = \"\";\n    this.maxConversations = 4;\n    this.activeConversation = null;\n    this.setupInput();\n    this.setupStyles();\n  }\n\n  private setupStyles(): void {\n    this.container.classList.add(\"conversation-grid\");\n  }\n\n  private setupInput(): void {\n    const inputArea = document.createElement(\"div\");\n    inputArea.className = \"global-input-area\";\n    inputArea.style.display = \"none\";\n    inputArea.innerHTML = `\n      <input \n        type=\"text\" \n        class=\"global-message-input\" \n        placeholder=\"Select a conversation...\" \n        disabled\n      >\n      <button class=\"global-send-btn\" disabled>Send</button>\n    `;\n\n    const main = document.querySelector(\"main\");\n    if (!main) {\n      throw new Error(\"Main element not found\");\n    }\n    main.appendChild(inputArea);\n\n    this.inputArea = inputArea;\n    this.input = inputArea.querySelector(\n      \".global-message-input\"\n    ) as HTMLInputElement;\n    this.sendButton = inputArea.querySelector(\n      \".global-send-btn\"\n    ) as HTMLButtonElement;\n\n    this.input.addEventListener(\"keypress\", (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n\n    this.sendButton.addEventListener(\"click\", () => {\n      if (this.input.value.trim()) {\n        this.sendMessage(this.input.value.trim());\n      }\n    });\n  }\n\n  private sendMessage(message: string): void {\n    if (!this.activeConversation) {\n      return;\n    }\n\n    if (!this.activeConversations.has(this.activeConversation)) {\n      return;\n    }\n\n    console.debug(\"sending message to \", this.activeConversation);\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"send-message\",\n        message: message,\n        roomName: this.activeConversation,\n      })\n    );\n    this.input.value = \"\";\n  }\n\n  addConversation(roomName: string): void {\n    if (this.activeConversations.has(roomName)) {\n      this.setActiveConversation(roomName);\n      return;\n    }\n\n    console.log(\"past addConversation return\");\n\n    if (this.activeConversations.size >= this.maxConversations) {\n      const oldestRoom = this.windowOrder[0];\n      this.removeConversation(oldestRoom);\n      this.windowOrder = this.windowOrder.slice(1);\n    }\n\n    const conversationWindow = new ConversationWindow(\n      roomName,\n      (name) => this.removeConversation(name),\n      (name) => this.setActiveConversation(name),\n      this.socket,\n      this.currentUsername\n    );\n    console.log(bgGreen(`adding ${roomName} - ${conversationWindow}`));\n\n    this.activeConversations.set(roomName, conversationWindow);\n    console.log(JSON.stringify(this.activeConversations));\n    this.windowOrder.push(roomName);\n    this.container.insertBefore(\n      conversationWindow.element,\n      this.container.lastChild\n    );\n    this.updateLayout();\n\n    this.socket.send(\n      JSON.stringify({\n        event: \"join-room\",\n        roomName: roomName,\n      })\n    );\n  }\n\n  addMessageHistory(roomName: string, messages: any[]): void {\n    const conversation = this.activeConversations.get(roomName);\n    console.log(\"addMessageHistory OUTERLOOP\");\n    console.log(JSON.stringify(this.activeConversations));\n    console.log(conversation);\n\n    if (conversation) {\n      console.log(\"addMessageHistory INNERLOOP\");\n\n      conversation.clearMessages();\n      messages.forEach((msg) => conversation.addMessage(msg));\n    }\n  }\n\n  removeConversation(roomName: string): void {\n    const conversation = this.activeConversations.get(roomName);\n\n    if (conversation) {\n      conversation.element.remove();\n      this.activeConversations.delete(roomName);\n      this.windowOrder = this.windowOrder.filter((name) => name !== roomName);\n\n      if (this.activeConversation === roomName) {\n        const remainingRooms = Array.from(this.activeConversations.keys());\n        if (remainingRooms.length > 0) {\n          this.setActiveConversation(remainingRooms[0]);\n        } else {\n          this.setActiveConversation(null);\n        }\n      }\n\n      this.updateLayout();\n    }\n  }\n\n  setActiveConversation(roomName: string | null): void {\n    this.activeConversations.forEach((conversation) => {\n      conversation.element.classList.remove(\"active\");\n    });\n\n    document.querySelectorAll(\"#cabals li\").forEach((item) => {\n      item.classList.remove(\"active\");\n    });\n\n    this.activeConversation = roomName;\n\n    if (roomName && this.activeConversations.has(roomName)) {\n      const conversation = this.activeConversations.get(roomName);\n      if (!conversation) return;\n\n      this.input.disabled = false;\n      this.sendButton.disabled = false;\n      this.input.placeholder = `Message ${roomName}...`;\n\n      conversation.element.classList.add(\"active\");\n\n      const roomButton = Array.from(\n        document.querySelectorAll(\"#cabals li\")\n      ).find((item) => item.textContent?.startsWith(roomName));\n\n      if (roomButton) {\n        roomButton.classList.add(\"active\");\n      }\n\n      this.socket.send(\n        JSON.stringify({\n          event: \"join-room\",\n          roomName: roomName,\n        })\n      );\n\n      this.input.focus();\n    } else {\n      this.input.disabled = true;\n      this.sendButton.disabled = true;\n      this.input.placeholder = \"Select a conversation...\";\n    }\n  }\n\n  private updateLayout(): void {\n    this.container.classList.remove(\"grid-1\", \"grid-2\", \"grid-3\", \"grid-4\");\n    if (this.activeConversations.size > 0) {\n      const gridClass = `grid-${this.activeConversations.size}`;\n      this.container.classList.add(gridClass);\n      this.inputArea.style.display = \"flex\";\n    } else {\n      this.inputArea.style.display = \"none\";\n    }\n  }\n\n  addMessage(roomName: string, username: string, content: string): void {\n    if (!this.activeConversations.has(roomName)) {\n      this.addConversation(roomName);\n    }\n\n    const conversation = this.activeConversations.get(roomName);\n    if (conversation) {\n      const messageData = {\n        id: crypto.randomUUID(),\n        username: username,\n        content: content,\n        timestamp: Date.now(),\n        roomName: roomName,\n      };\n\n      conversation.addMessage(messageData);\n\n      if (roomName !== this.activeConversation) {\n        conversation.element.classList.add(\"has-unread\");\n      }\n\n      conversation.element.classList.add(\"message-received\");\n      setTimeout(() => {\n        conversation.element.classList.remove(\"message-received\");\n      }, 300);\n    }\n  }\n}\n", "export interface ContextMenuOptions {\n  x: number;\n  y: number;\n  items: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\nexport class ContextMenu {\n  private element: HTMLElement;\n\n  constructor() {\n    this.element = document.createElement(\"div\");\n    this.element.className = \"context-menu\";\n    document.body.appendChild(this.element);\n  }\n\n  show(options: ContextMenuOptions): void {\n    this.element.style.left = `${options.x}px`;\n    this.element.style.top = `${options.y}px`;\n    this.element.innerHTML = \"\";\n\n    options.items.forEach((item) => {\n      const menuItem = document.createElement(\"div\");\n      menuItem.className = \"context-menu-item\";\n      menuItem.textContent = item.label;\n      menuItem.onclick = () => {\n        item.action();\n        this.hide();\n      };\n      this.element.appendChild(menuItem);\n    });\n\n    this.element.style.display = \"block\";\n  }\n\n  hide(): void {\n    this.element.style.display = \"none\";\n  }\n}\n", "import { MultiConversationLayout } from \"./Components/MultiConversationLayout.ts\";\nimport { Room } from \"../src/server/types/Room.ts\";\nimport { ContextMenu } from \"../src/server/types/Ui.ts\";\nimport { CreateRoomData } from \"../src/server/types/Message.ts\";\n\n// Define interfaces for our message types\ninterface BaseEvent {\n  event: string;\n}\n\ninterface UpdateUsersEvent extends BaseEvent {\n  event: \"update-users\";\n  usernames: string[];\n}\n\ninterface UpdateRoomsEvent extends BaseEvent {\n  event: \"update-rooms\";\n  rooms: Room[];\n}\n\ninterface NewMessageEvent extends BaseEvent {\n  event: \"new-message\";\n  message: {\n    roomName: string;\n    username: string;\n    content: string;\n    id: string;\n    timestamp: number;\n  };\n}\n\ninterface RoomHistoryEvent extends BaseEvent {\n  event: \"room-history\";\n  roomName: string;\n  messages: Array<{\n    id: string;\n    username: string;\n    content: string;\n    roomName: string;\n    timestamp: number;\n    edited?: boolean;\n  }>;\n}\n\ninterface EditMessageEvent extends BaseEvent {\n  event: \"edit-message\";\n  roomName: string;\n  id: string;\n  message: string;\n}\n\ninterface DeleteMessageEvent extends BaseEvent {\n  event: \"delete-message\";\n  roomName: string;\n  id: string;\n}\n\ninterface ErrorEvent extends BaseEvent {\n  event: \"error\";\n  message: string;\n}\n\ninterface ExpiredEvent extends BaseEvent {\n  event: \"expired\";\n  roomName: string;\n}\n\ntype ServerEvent =\n  | UpdateUsersEvent\n  | UpdateRoomsEvent\n  | NewMessageEvent\n  | RoomHistoryEvent\n  | EditMessageEvent\n  | DeleteMessageEvent\n  | ErrorEvent\n  | ExpiredEvent;\n\n// Initialize WebSocket connection\nconst username = prompt(\"Please enter your name\") ?? \"Anonymous\";\nconst url = new URL(`./start_web_socket?username=${username}`, location.href);\nurl.protocol = url.protocol.replace(\"http\", \"ws\");\nexport const socket = new WebSocket(url.href);\n\n// Create the layout manager\nconst conversationLayout = new MultiConversationLayout(socket, username);\nconst contextMenu = new ContextMenu();\n\n// Hide context menu when clicking anywhere other than the user list elements\ndocument.addEventListener(\"click\", () => contextMenu.hide());\n\nlet lastReceivedRoomData: Array<{\n  name: string;\n  lastActivity: number;\n  ttl: number;\n}> | null = null;\n\nsocket.onmessage = (event: MessageEvent) => {\n  const data = JSON.parse(event.data) as ServerEvent;\n  console.log(\"Received event:\", data.event, data);\n  switch (data.event) {\n    case \"update-users\":\n      updateUserList(data.usernames);\n      break;\n\n    case \"update-rooms\":\n      lastReceivedRoomData = data.rooms; // Store the data\n      updateRoomList(data.rooms);\n      break;\n\n    case \"new-message\":\n      conversationLayout.addMessage(\n        data.message.roomName,\n        data.message.username,\n        data.message.content\n      );\n      break;\n\n    case \"room-history\":\n      conversationLayout.addMessageHistory(data.roomName, data.messages);\n      break;\n\n    case \"edit-message\": {\n      const conversation = conversationLayout.activeConversations.get(\n        data.roomName\n      );\n      if (conversation) {\n        conversation.handleMessageUpdate(data.id, data.message);\n      }\n      break;\n    }\n\n    case \"delete-message\": {\n      const conv = conversationLayout.activeConversations.get(data.roomName);\n      if (conv) {\n        conv.handleMessageDelete(data.id);\n      }\n      break;\n    }\n\n    case \"error\":\n      console.error(\"Server error:\", data.message);\n      alert(data.message);\n      break;\n\n    case \"expired\":\n      console.info(\"Handling expired room:\", data.roomName);\n      conversationLayout.removeConversation(data.roomName);\n      break;\n  }\n};\n\nsetInterval(() => {\n  if (lastReceivedRoomData) {\n    updateRoomList(lastReceivedRoomData);\n  }\n}, 1000);\n\nfunction updateRoomList(\n  rooms: Array<{ name: string; lastActivity: number; ttl: number }>\n): void {\n  const roomList = document.querySelector<HTMLUListElement>(\"#cabals\");\n  if (!roomList) return;\n\n  roomList.replaceChildren();\n\n  for (const room of rooms) {\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = `${room.name}`;\n\n    // Calculate how much time has elapsed\n    const timeElapsed = Date.now() - room.lastActivity;\n    const ttlProgress = Math.min(timeElapsed / room.ttl, 1); // Value between 0 and 1\n\n    // Interpolate between start color (26, 26, 29) and end color (150, 35, 0)\n    const r = Math.round(26 + (128 - 26) * ttlProgress);\n    const g = Math.round(26 + (0 - 26) * ttlProgress);\n    const b = Math.round(29 + (32 - 29) * ttlProgress);\n\n    listItem.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;\n\n    if (conversationLayout.activeConversation === room.name) {\n      listItem.classList.add(\"active\");\n    }\n\n    listItem.onclick = () => {\n      const items = roomList.querySelectorAll(\"li\");\n      items.forEach((item) => {\n        item.classList.remove(\"active\");\n      });\n\n      listItem.classList.add(\"active\");\n      conversationLayout.addConversation(room.name);\n      conversationLayout.setActiveConversation(room.name);\n\n      console.log(\"updateRoomList\");\n      socket.send(\n        JSON.stringify({\n          event: \"join-room\",\n          roomName: room.name,\n        })\n      );\n    };\n    roomList.appendChild(listItem);\n  }\n}\n\nfunction updateUserList(cohortNames: string[]): void {\n  const userList = document.querySelector<HTMLUListElement>(\"#users\");\n  if (!userList) return;\n\n  userList.replaceChildren();\n\n  for (const cohortName of cohortNames) {\n    // if current username skip\n    if (cohortName === username) {\n      continue;\n    }\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = cohortName;\n\n    listItem.addEventListener(\"contextmenu\", (event) => {\n      event.preventDefault();\n\n      contextMenu.show({\n        x: event.pageX,\n        y: event.pageY,\n        items: [\n          {\n            label: \"Confer\",\n            action: () => {\n              const roomName = `A colloquy between ${[username, cohortName]\n                .sort()\n                .join(\" and \")}`;\n              // Sort usernames to ensure consistent room names regardless of who initiates\n\n              socket.send(\n                JSON.stringify({\n                  event: \"create-private-chat\",\n                  participants: [username, cohortName],\n                  roomName: roomName,\n                })\n              );\n\n              // Add conversation window\n              conversationLayout.addConversation(roomName);\n            },\n          },\n        ],\n      });\n    });\n\n    userList.appendChild(listItem);\n  }\n}\n\n// Create cabal button handler\nconst createCabalButton =\n  document.querySelector<HTMLButtonElement>(\"#create-cabal\");\nif (createCabalButton) {\n  createCabalButton.onclick = () => {\n    const name = prompt(\"Enter cabal name:\");\n    if (name) {\n      const data: CreateRoomData = {\n        roomName: name,\n        roomType: \"cabal\",\n        initialMembers: [username],\n      };\n      socket.send(\n        JSON.stringify({\n          event: \"create-room\",\n          ...data,\n        })\n      );\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["Deno", "noColor", "enabled", "code", "open", "close", "run", "str", "bgGreen", "str", "run", "code", "ANSI_PATTERN", "ConversationWindow", "roomName", "onClose", "onActivate", "socket", "currentUsername", "div", "e", "closeBtn", "messageData", "messageDiv", "timeString", "messages", "i", "messageId", "newText", "id", "newMessage", "content", "actions", "username", "header", "unsafe", "MultiConversationLayout", "socket", "username", "containerElement", "inputArea", "main", "e", "message", "roomName", "oldestRoom", "conversationWindow", "ConversationWindow", "name", "bgGreen", "messages", "conversation", "msg", "remainingRooms", "item", "roomButton", "gridClass", "content", "messageData", "ContextMenu", "options", "item", "menuItem", "username", "url", "socket", "conversationLayout", "MultiConversationLayout", "contextMenu", "ContextMenu", "lastReceivedRoomData", "event", "data", "updateUserList", "updateRoomList", "conversation", "conv", "rooms", "roomList", "room", "listItem", "timeElapsed", "ttlProgress", "r", "g", "item", "cohortNames", "userList", "cohortName", "roomName", "createCabalButton", "name"]
}
