var o=class{cabalName;onClose;onActivate;socket;currentUsername;element;messageContainer;unreadCount;constructor(e,t,s,n,r){this.cabalName=e,this.onClose=t,this.onActivate=s,this.socket=n,this.currentUsername=r,this.element=this.createElement(),this.messageContainer=this.element.querySelector(".messages"),this.unreadCount=0,this.setupEventListeners()}clearMessages(){this.messageContainer.innerHTML="",this.unreadCount=0,this.updateUnreadCount()}createElement(){let e=document.createElement("div");return e.className="conversation-window",e.innerHTML=`
      <div class="window-header">
        <h3 data-unread="0">${this.cabalName}</h3>
        <button class="close-btn" aria-label="Close conversation">\xD7</button>
      </div>
      <div class="messages"></div>
    `,e}setupEventListeners(){this.element.addEventListener("click",t=>{t.target.closest(".close-btn")||(this.clearUnread(),this.onActivate(this.cabalName))});let e=this.element.querySelector(".close-btn");e&&e.addEventListener("click",t=>{t.stopPropagation(),this.onClose(this.cabalName)})}addMessage(e){let t=document.createElement("div");t.className="message",t.dataset.messageId=e.id;let s="Unknown time";s=new Date(e.timestamp).toLocaleTimeString(),t.innerHTML=`
      <div class="message-header">
        <span class="username">${this.escapeHtml(e.username)}</span>
        <span class="timestamp">${s}</span>
        ${e.edited?'<span class="edited">(edited)</span>':""}
      </div>
      <div class="content">
        ${this.escapeHtml(e.content)}
      </div>
    `,this.messageContainer.appendChild(t),this.scrollToBottom()}addMessageHistory(e){this.clearMessages(),e.forEach(t=>this.addMessage(t))}saveEdit(e,t){this.socket.send(JSON.stringify({event:"edit-message",id:e,message:t}))}deleteMessage(e){confirm("Are you sure you want to delete this message?")&&this.socket.send(JSON.stringify({event:"delete-message",id:e}))}handleMessageUpdate(e,t){let s=this.messageContainer.querySelector(`[data-message-id="${e}"]`);if(s){let n=s.querySelector(".content");n&&(n.textContent=t,s.querySelector(".edited")||s.querySelector(".message-header")?.insertAdjacentHTML("beforeend",'<span class="edited">(edited)</span>'))}}handleMessageDelete(e){let t=this.messageContainer.querySelector(`[data-message-id="${e}"]`);if(t){let s=t.querySelector(".content");if(s){s.textContent="This message was deleted",s.classList.add("deleted");let n=t.querySelector(".message-actions");n&&n.remove()}}}isOwnMessage(e){return e===this.currentUsername}updateUnreadCount(){let e=this.element.querySelector(".window-header h3");e&&(this.unreadCount>0?(e.setAttribute("data-unread",this.unreadCount.toString()),this.element.classList.add("has-unread")):(e.setAttribute("data-unread","0"),this.element.classList.remove("has-unread")))}clearUnread(){this.unreadCount=0,this.updateUnreadCount()}scrollToBottom(){this.messageContainer.scrollTop=this.messageContainer.scrollHeight}escapeHtml(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):""}};var c=class{socket;currentUsername;activeConversations;windowOrder;container;maxConversations;activeConversation;inputArea;input;sendButton;constructor(e,t){this.socket=e,this.currentUsername=t,this.activeConversations=new Map,this.inputArea=document.createElement("div"),this.inputArea.className="input-area",this.input=document.createElement("input"),this.input.type="text",this.input.className="message-input",this.sendButton=document.createElement("button"),this.sendButton.className="send-button",this.sendButton.textContent="Send",this.windowOrder=[];let s=document.getElementById("multi-conversation-layout");if(!s)throw new Error("Container element not found");this.container=s,this.container.innerHTML="",this.maxConversations=4,this.activeConversation=null,this.setupInput(),this.setupStyles()}setupStyles(){this.container.classList.add("conversation-grid")}setupInput(){let e=document.createElement("div");e.className="global-input-area",e.style.display="none",e.innerHTML=`
      <input 
        type="text" 
        class="global-message-input" 
        placeholder="Select a conversation..." 
        disabled
      >
      <button class="global-send-btn" disabled>Send</button>
    `;let t=document.querySelector("main");if(!t)throw new Error("Main element not found");t.appendChild(e),this.inputArea=e,this.input=e.querySelector(".global-message-input"),this.sendButton=e.querySelector(".global-send-btn"),this.input.addEventListener("keypress",s=>{s.key==="Enter"&&this.input.value.trim()&&this.sendMessage(this.input.value.trim())}),this.sendButton.addEventListener("click",()=>{this.input.value.trim()&&this.sendMessage(this.input.value.trim())})}sendMessage(e){this.activeConversation&&this.activeConversations.has(this.activeConversation)&&(this.socket.send(JSON.stringify({event:"send-message",message:e,cabalName:this.activeConversation})),this.input.value="")}addConversation(e){if(this.activeConversations.has(e)){this.setActiveConversation(e);return}if(this.activeConversations.size>=this.maxConversations){let s=this.windowOrder[0];this.removeConversation(s),this.windowOrder=this.windowOrder.slice(1)}let t=new o(e,s=>this.removeConversation(s),s=>this.setActiveConversation(s),this.socket,this.currentUsername);this.activeConversations.set(e,t),this.windowOrder.push(e),this.container.insertBefore(t.element,this.container.lastChild),this.updateLayout(),this.socket.send(JSON.stringify({event:"join-cabal",cabalName:e}))}addMessageHistory(e,t){let s=this.activeConversations.get(e);s&&(s.clearMessages(),t.forEach(n=>s.addMessage(n)))}removeConversation(e){let t=this.activeConversations.get(e);if(t){if(t.element.remove(),this.activeConversations.delete(e),this.windowOrder=this.windowOrder.filter(s=>s!==e),this.activeConversation===e){let s=Array.from(this.activeConversations.keys());s.length>0?this.setActiveConversation(s[0]):this.setActiveConversation(null)}this.updateLayout()}}setActiveConversation(e){if(this.activeConversations.forEach(t=>{t.element.classList.remove("active")}),document.querySelectorAll("#cabals li").forEach(t=>{t.classList.remove("active")}),this.activeConversation=e,e&&this.activeConversations.has(e)){let t=this.activeConversations.get(e);if(!t)return;this.input.disabled=!1,this.sendButton.disabled=!1,this.input.placeholder=`Message ${e}...`,t.element.classList.add("active");let s=Array.from(document.querySelectorAll("#cabals li")).find(n=>n.textContent?.startsWith(e));s&&s.classList.add("active"),this.socket.send(JSON.stringify({event:"join-cabal",cabalName:e})),this.input.focus()}else this.input.disabled=!0,this.sendButton.disabled=!0,this.input.placeholder="Select a conversation..."}updateLayout(){if(this.container.classList.remove("grid-1","grid-2","grid-3","grid-4"),this.activeConversations.size>0){let e=`grid-${this.activeConversations.size}`;this.container.classList.add(e),this.inputArea.style.display="flex"}else this.inputArea.style.display="none"}addMessage(e,t,s){this.activeConversations.has(e)||this.addConversation(e);let n=this.activeConversations.get(e);if(n){let r={id:crypto.randomUUID(),username:t,content:s,timestamp:Date.now(),roomName:e};n.addMessage(r),e!==this.activeConversation&&n.element.classList.add("has-unread"),n.element.classList.add("message-received"),setTimeout(()=>{n.element.classList.remove("message-received")},300)}}};var m=prompt("Please enter your name")??"Anonymous",l=new URL(`./start_web_socket?username=${m}`,location.href);l.protocol=l.protocol.replace("http","ws");var d=new WebSocket(l.href),a=new c(d,m);d.onmessage=i=>{let e=JSON.parse(i.data);switch(e.event){case"update-users":g(e.usernames);break;case"update-cabals":u(e.cabals);break;case"new-message":a.addMessage(e.message.roomName,e.message.username,e.message.content);break;case"cabal-history":a.addMessageHistory(e.cabalName,e.messages);break;case"edit-message":{let t=a.activeConversations.get(e.cabalName);t&&t.handleMessageUpdate(e.id,e.message);break}case"delete-message":{let t=a.activeConversations.get(e.cabalName);t&&t.handleMessageDelete(e.id);break}case"error":console.error("Server error:",e.message),alert(e.message);break;case"expired":console.log("Handling expired room:",e.cabalName),a.removeConversation(e.cabalName);break}};function u(i){let e=document.querySelector("#cabals");if(e){e.replaceChildren();for(let t of i){let s=document.createElement("li");s.textContent=`${t.name}`,a.activeConversation===t.name&&s.classList.add("active"),s.onclick=()=>{e.querySelectorAll("li").forEach(r=>{r.classList.remove("active")}),s.classList.add("active"),a.addConversation(t.name),a.setActiveConversation(t.name),d.send(JSON.stringify({event:"join-cabal",cabalName:t.name}))},e.appendChild(s)}}}function g(i){let e=document.querySelector("#users");if(e){e.replaceChildren();for(let t of i){let s=document.createElement("li");s.textContent=t,e.appendChild(s)}}}var v=document.querySelector("#create-cabal");v&&(v.onclick=()=>{let i=prompt("Enter cabal name:");i&&d.send(JSON.stringify({event:"create-cabal",cabalName:i}))});export{d as socket};
//# sourceMappingURL=app.js.map
